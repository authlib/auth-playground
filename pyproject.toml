[build-system]
requires = ["hatchling", "babel", "setuptools >= 50.0.0; python_version<'3.13'"]
build-backend = "hatchling.build"

[project]
name = "auth-playground"
version = "0.1.1"
description = "Demonstration OpenID Connect Client"
readme = "README.md"
license = {text = "MIT"}
requires-python = ">=3.10"
keywords = ["oidc", "oauth", "oauth2", "openid", "identity", "authentication"]
authors = [{name="Yaal Coop", email="contact@yaal.coop"}]
maintainers = [{name="Éloi Rivard", email="eloi@yaal.coop"}]

dependencies = [
    "authlib>=1.6.5",
    "cachelib>=0.10.0",
    "flask>=3.1.2",
    "flask-babel>=4.0.0",
    "flask-session>=0.8.0",
    "flask-wtf>=1.2.0",
    "python-dotenv>=1.0.0",
    "requests>=2.32.5",
]

[project.urls]
repository = "https://github.com/yaal-coop/auth-playground"

[project.scripts]
auth-playground = "auth_playground.cli:run"

[dependency-groups]
dev = [
    "prek>=0.2.11",
    "pytest>=8.4.2",
    "pytest-coverage>=0.0",
    "pytest-iam>=0.2.4",
    "tox-uv>=1.29.0",
    # Babel 2.14 does not directly depend on setuptools
    # https://github.com/python-babel/babel/blob/40e60a1f6cf178d9f57fcc14f157ea1b2ab77361/CHANGES.rst?plain=1#L22-L24
    # and neither python 3.12 due to PEP 632
    # https://peps.python.org/pep-0632/
    "setuptools >= 50.0.0; python_version>='3.12'",
]

release = [
    "pyinstaller>=6.11.1",
]

[tool.coverage.run]
source = [
    "auth_playground",
    "tests",
]
omit = [".tox/*"]
branch = true

[tool.coverage.report]
exclude_lines = [
    "@pytest.mark.skip",
    "pragma: no cover",
    "raise NotImplementedError",
    "except ImportError",
    "if app.debug",
    "pass",
    "if TYPE_CHECKING",
]

[tool.ruff.lint]
select = [
    "D", # pydocstyle
    "B", # flake8-bugbear
    "E", # pycodestyle
    "F", # pyflakes
    "I", # isort
    "UP", # pyupgrade
]
ignore = [
    "E501", # line-too-long
    "E722", # bare-except
    "D100", # public module
    "D101", # public class
    "D102", # public method
    "D103", # public function
    "D104", # public package
    "D105", # magic method
    "D106", # nested class
    "D107", # public init
    "D203", # no-blank-line-before-class
    "D213", # multi-line-summary-second-line
]

[tool.ruff.lint.isort]
force-single-line = true

[tool.ruff.format]
docstring-code-format = true

[tool.tox]
requires = ["tox>=4.19"]
env_list = [
    "style",
    "py310",
    "py311",
    "py312",
    "py313",
    "minversions",
    "coverage",
    "binary",
]

[tool.tox.env_run_base]
runner = "uv-venv-lock-runner"
dependency_groups = ["dev"]
uv_sync_flags = ["--all-extras"]
commands = [
    ["pytest", "--showlocals", "--full-trace", "{posargs}"],
]

[tool.tox.env.style]
skip_install = true
runner = "uv-venv-runner"
commands = [
    ["prek", "run", "--all-files", "--show-diff-on-failure"],
]

[tool.tox.env.minversions]
runner = "uv-venv-runner"
uv_resolution = "lowest-direct"
basepython = ["python3.10"]

[tool.tox.env.coverage]
commands = [
    ["pytest", "--cov", "--cov-fail-under=100", "--cov-report", "term:skip-covered", "{posargs}"],
    ["coverage", "html"],
]

[tool.tox.env.binary]
skip_install = true
runner = "uv-venv-lock-runner"
dependency_groups = ["release"]
uv_sync_flags = ["--all-extras"]
commands = [
    ["pyinstaller", "--log-level", "WARN", "auth-playground.spec"],
]

[tool.pytest.ini_options]
filterwarnings = [
    "ignore::joserfc.errors.SecurityWarning",
]

[[tool.babel.mappings]]
method = "python"
pattern = "**.py"

[[tool.babel.mappings]]
method = "jinja2"
pattern = "**/templates/**.html"
trimmed = "true"

[tool.mypy]
warn_unused_ignores = true
exclude = [
  "tests/",
  "conftest.py",
]
